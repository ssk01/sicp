(define (square x)
  (* x x))
(define (sum-of-square x y)
  (+ (square x) (square y)))
;;(sum-of-square 3 4)
;;(sum-of-square 3 4)
;;(+ 3 4)
;;(abs( - 3))
; (+ 3 4)
(define (good-enough guess x)
  (< (abs (- (square guess) x)) 0.001)
  )
(define (averg a b)
  (/ (+ a b) 2)
)
(define (improve guess x)
  (averg guess (/ x guess))
)
(define (sqrt-iter guess x) 
  (if (good-enough guess x)
      guess
      (sqrt-iter (improve guess x) x)
  )
)
(define (sqrt1 x)
  (sqrt-iter 1 x )  
)
; (sqrt1 2.0)
; (sqrt1 3.0)
; (sqrt1 4.0)

; count change
(define (count-change amount)
    (cc amount 5)
)
(define (cc amount kinds-of-coins)
    (define (first-denomination kinds-of-coins)
      (cond ((= kinds-of-coins 1) 1)
            ((= kinds-of-coins 2) 5)
            ((= kinds-of-coins 3) 10)
            ((= kinds-of-coins 4) 25)
            ((= kinds-of-coins 5) 50)
      )
    )
    (cond ((= amount 0) 1)
          ((or (< amount 0) (= kinds-of-coins 0)) 0)
          (else 
            (+ (cc amount (- kinds-of-coins 1))
               (cc (- amount (first-denomination kinds-of-coins) ) kinds-of-coins ))
          )
    )
)
; (time (count-change 200))
