#lang racket
(define (sum-int a b)
    (if (> a b)
        0
        (+ a (sum-int (+ a 1) b))
    )    
)
(define (sum term a next b)
    (if (> a b)
    0
    (+ (term a) (sum term (next a)  next b)))
)
; (sum (lambda (x) (* x x)) 1 (lambda (x) (+ x 1)) 3)

;折半查找
(define (average a b)
  (/ (+ a b) 2)
)
(define (close-enough? guess x)
  (< (abs (- guess x)) 0.0001)
)
(define (search f neg-point pos-point)
    (let ((midpoint (average neg-point pos-point)))
        (if (close-enough? neg-point pos-point)
            midpoint
            (let ((test-val (f midpoint)))
                (cond ((positive? test-val) (search f neg-point midpoint))
                        ((negative? test-val) (search f midpoint pos-point))
                        (else midpoint)
                )
            )
        )
    )
)
(define (half-interval-method f a b)
    (let ((av (f a))
            (bv (f b))
        )
        (cond ((and (negative? av) (positive? bv)) 
                (search f a b))
                ((and (negative? bv) (positive? av)) 
                    (search f b a))
                (else error "should be -+")
        )
    
    )
)
; (half-interval-method (lambda (x)  (- (* x x x) (* 2 x) 3)) 1.0 2.0 )
; (sum-int 1 100)

(define tolerance 0.00001)
(define (fixed-point f first-guess)
    (define (close-enough? guess x)
        (< (abs (- guess x)) tolerance)
    )
    (define (try guess)
        (let ((next (f guess)))
            (if (close-enough? next guess) next
                (try next)
            )
        )
    )
    (try first-guess)
)
; (fixed-point cos 1.0)

(define (average-damp f)
    (lambda (x) (average x (f x)))
)
(define (sqrt2 x)
   (fixed-point (average-damp (lambda (y) (/ x y))) 1.0)
)
; (sqrt2 2)


; #牛顿法
(define (deriv g)
    (define dx 0.00001)
    (lambda (x) (/ (- (g (+ x dx)) (g x) ) dx))
)
(define (newton-transfrom g)
        (lambda (x) (- x (/ (g x) ((deriv g) x))))
)
(define (sqrt3 x)
    (fixed-point (newton-transfrom (lambda (y) (- (* y y) x))) 1)
)
; (sqrt3 2)
; (time (cc 100 5))
; (time (cc 200 5))
(display (random 2)) ; ==> 9