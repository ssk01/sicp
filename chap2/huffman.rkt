#lang racket

(define (make-leaf symbol weight)
    (list 'leaf symbol weight)
)
(define (leaf? obj)
        (eq? (car obj) 'leaf)
)
(define (symbol-leaf x)
    (cadr x)
)
(define (weight-leaf x)
    (caddr x)
)
(define (make-code-tree left right)
    (list left
        right
        (append (symbols left)(symbols right))
        (append (weights left)(weights right))
    )
)
(define (left-branch branch)
    (car branch))
(define (right-branch branch)
    ( cadr branch))
(define (weights obj)
    (if (leaf? obj) 
        (list (weight-leaf obj))
        (cadddr obj)
    )
)

(define (symbols obj)
    (if (leaf? obj) 
        (list (symbol-leaf obj))
        (caddr obj)
    )
)
(define (weight obj)
    (if (leaf? obj) 
         (weight-leaf obj)
        (accumulate + 0 (cadddr obj))
    )
)
(define (accumulate op initial sequence)
    (if (null? sequence) initial
        (op (car sequence) (accumulate op initial (cdr sequence)))
        )
)
(define (symbol obj)
    (if (leaf? obj) 
        (symbol-leaf obj)
        (accumulate + 0 (cadddr obj))
    )
)


(define smaple-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))

(define (decode bit tree)
    (define (decode-in bits branch)
        (if (null? bits) '()
            (let (  (next-branch (chose-branch (car bits) branch )))
                (if (leaf? next-branch) 
                    (cons (symbol-leaf next-branch) (decode-in (cdr bits) tree))
                    (decode-in (cdr bits) next-branch)
                )
            )
        )
    )
    ; (display "fuck")
    ; 1
    (decode-in bit tree)
)
(define (chose-branch bit branch)
    (cond ((= bit 1) (right-branch branch))
        ((= bit 0) (left-branch branch))
        (else error "fuck branch")
    
))

(define (adjoin-set x set)
    (cond ((null? set) (list x))
            ((< (weight x) (weight (car set))) (cons x set) )
            (else (cons (car set) (adjoin-set x (cdr set))))
    )
)

(define (make-leaf-set pairs)
    (if (null? pairs)
        '()
        (let ((pair (car pairs) ))
            ; (display pair)
            (adjoin-set (make-leaf (car pair) ; symbol
                                    (cadr pair) ; frequency
                        ) (make-leaf-set (cdr pairs))  
            )
        )
    )
)
(define (successive-merge set)
    (if (null? (cdr set))
        (car set)
        (let ((one (car set))
        (two (cadr set))
        )
        (successive-merge (adjoin-set (make-code-tree  one two) (cddr set)))
        )                                    
    )
)
(define (generate-huffman-tree pairs)
    (successive-merge (make-leaf-set pairs))
)
(define sample-tree
    (make-code-tree (make-leaf 'A 8)
        (make-code-tree (make-leaf 'B 5)
        (make-code-tree (make-leaf 'C 3)
        (make-leaf 'D 4)
        )
        )
    )
)
(define (encode chars tree)
    (define (getPairs tree)
        (define (onepath path branch)
            (if (leaf? branch) 
                (list (symbol-leaf branch) path)
                (append (onepath (append path '(0)) (left-branch branch))
                (onepath (append path '(1)) (right-branch branch)))
                )
        )
        (onepath '() tree)
    )
    (define (encode-in chars pairs)
        (define (findEncode c pairs)
            (if (null? pairs) (error "fuck c"  c)
                (if (eq? (car pairs) c) 
                    (cadr pairs)
                    (findEncode c (cddr pairs)) 
                ))
        )
        (if (null? chars)
            null
            (append  (findEncode (car chars) pairs) (encode-in (cdr chars) pairs)) )
        ; (findEncode 'B (list 'A (list 0) 'B (list 1 0)))
    )
    (let ((pairs (getPairs tree)))
        ; (display pairs)
        ; (display (car chars))
        ; (display (car pairs))
        ; (if (eq? (car pairs) 'A)  (display "tree") (display "fuck"))
        (encode-in chars pairs)
        ; (encode-in (list 'A 'B) (list 'A (list 0) 'B (list 1 0)))

    )
        
)

; (display (decode smaple-message sample-tree))
; (adjoin-set (make-leaf 'b 3) (adjoin-set (make-leaf 'A 4) '()))  ; symbol
; (make-leaf-set (list (list 'A 4) (list 'C 1) (list 'D 1) (list 'B 2) ))
                                    ; (cadr pair) 
(define huff (generate-huffman-tree (list (list 'A 8) (list 'B 5) (list 'D 4) (list 'C 3) )))
huff
sample-tree
; (getPairs zd)
(define message (encode (list 'A 'C 'A 'B 'B 'D 'A) huff))
(decode message huff)

; (decode smaple-message sample-tree)
; (decode smaple-message zd)
; sample-tree
; (make-code-tree (make-leaf 'B 2)
; (make-code-tree (make-leaf 'D 1)
; (make-leaf 'C 1)
; )
; )