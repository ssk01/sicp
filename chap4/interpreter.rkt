#lang racket
(define apply-primitive-procedure apply)
(define (true? x)
    (not (eq? x false))
)
(define (false? x)
    (eq? x false)
)


(define input-prompt "---  M-Eval input:")
(define output-prompt "---  M-Eval value:")
(define (prompt-for-input string)
    (newline)
    (newline)
    (display string)
    (newline)
)
(define (announce-for-output string)
    (newline)
    (display string)
    (newline)
)
(define (user-print object)
    (display object)
)

(define (driver-loop)
    (prompt-for-input input-prompt)
    (let ((input (read)))
        (let ((output (eval input (init))))
            (announce-for-output output-prompt)
            (user-print output)
        )
    )
    (driver-loop)
)
(define (self-evaluting? exp)
    (cond ((number? exp) true)
        ((string? exp) true)
        (else false)
    )
)

(define (application? exp)
    (pair? exp)
)

(define (operator exp)
    (car exp)
)
(define (operands exp)
    (cdr exp)
)
(define (no-operands? exp)
    (null? exp)
)
(define (first-operand exp)
    (car exp)
)
(define (rest-operand exp)
    (cdr exp)
)
(define (variable? exp) (symbol? exp))

(define (quoted? exp) (tagged-list? exp 'quote))

(define (text-of-quotation exp) (cadr exp))

(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
    false))

(define (list-of-values values env)
    (if (null? values) 
        null
        (cons (eval (car values) env) (list-of-values (cdr values) env))))


(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define (frame-values frame) (cdr frame))
(define (frame-variables frame) (car frame))
(define (make-frame vars vals)
    (cons vars vals)
)
(define (lookup-variable-value exp env)
    (define (env-lookup env)
        (define (scan-up vars vals)
            (begin
            ; (display vars)
            ; (display vals)
            (if (null? vars)
                (env-lookup (enclosing-environment env))
                (if (eq? exp  (car vars))
                    (car vals)
                    (scan-up (cdr vars) (cdr vals))
                )
            ))
        )
        (if (eq? null env) (error "empty env exp cannot find " exp env)
            (let ((frame (first-frame env)))
                (scan-up (frame-variables frame) (frame-values frame))
            )
        )
        )
    (env-lookup env)
)
(define (primitive-environment)
    (list (list '+ +)
    (list '- -)
    (list '* *)
    (list 'remainder remainder)
    
    ))
(define (map proc items)
    (if (null? items)
        '()
        (cons (proc (car items)) (map proc (cdr items)) )
    )
)
(define (init)
    (let ((env (primitive-environment)))
        (let(
        (vars (map car env))
        (vals (map (lambda(proc) (list 'primitive (cadr proc) )) env) )
        )
    (extend-environment vars vals null)))
)
    ; 'primitive
(define (primitive-procudure? exp)
    (eq? (car exp) 'primitive))
(define (extend-environment vars vals base-env)
    (cons (make-frame vars vals) base-env)
)

(define (apply_ procedure paraments)
    (cond ((primitive-procudure? procedure) (apply-primitive-procedure (cadr procedure) paraments))
        (else error "not procedure" procedure paraments)))


(define (eval exp env)
    (cond ((self-evaluting? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ; ((quoted? exp) (text-of-quotation exp))
        ; ((assignment? exp) (eval-assignment exp env))
        ; ((definition? exp) (eval-definition exp env))
        ; ((if? exp) (eval-if exp env))
        ; ((lambda? exp) (make-procedure (lambda-paraments exp) 
        ;                               (lambda-body exp)
        ;                               env
        ;                               ))
        ; ((begin? exp)
        ;     (eval-sequence (begin-actions exp) env)
        ; )
        ; ((cond? exp)
        ;     (eval (cond->if exp) env)
        ; )
        ((application? exp)
            (apply_ (eval (operator exp) env)
                (list-of-values (operands exp) env)
            )
        )
        (else
            (error "unknown expression type eval" exp)    
        )
    )
)


;;; main
(driver-loop)

; test ok
; 1
; 2
; "fasdf"

; test todo