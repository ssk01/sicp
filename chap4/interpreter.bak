#lang racket

(define (true? x)
    (not (eq? x false))
)
(define (false? x)
    (eq? x false)
)


(define input-prompt "---  M-Eval input:")
(define output-prompt "---  M-Eval value:")
(define (prompt-for-input string)
    (newline)
    (newline)
    (display string)
    (newline)
)
(define (announce-for-output string)
    (newline)
    (display string)
    (newline)
)
(define (user-print object)
    (display object)
)

(define (driver-loop)
    (prompt-for-input input-prompt)
    (let ((input (read)))
        (let ((output (eval input '())))
            (announce-for-output output-prompt)
            (user-print output)
        )
    )
    (driver-loop)
)
(define (self-evaluting? exp)
    (cond ((number? exp) true)
        ((string? exp) true)
        (else false)
    )
)

(define (application? exp)
    (pair? exp)
)

(define (operator exp)
    (car exp)
)
(define (operands exp)
    (cdr exp)
)
(define (no-operands? exp)
    (null? exp)
)
(define (first-operand exp)
    (car exp)
)
(define (rest-operand exp)
    (cdr exp)
)
(define (variable? exp) (symbol? exp))

(define (quoted? exp) (tagged-list? exp 'quote))

(define (text-of-quotation exp) (cadr exp))

(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
    false))

(define (list-of-values values env)
    (if (null? values) 
        null
        (cons (eval (car values) env) (list-of-values (cdr values) env)))


(define (lookup-variable-value exp env)
    +
)
(define (eval exp env)
    (cond ((self-evaluting? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ; ((quoted? exp) (text-of-quotation exp))
        ; ((assignment? exp) (eval-assignment exp env))
        ; ((definition? exp) (eval-definition exp env))
        ; ((if? exp) (eval-if exp env))
        ; ((lambda? exp) (make-procedure (lambda-paraments exp) 
        ;                               (lambda-body exp)
        ;                               env
        ;                               ))
        ; ((begin? exp)
        ;     (eval-sequence (begin-actions exp) env)
        ; )
        ; ((cond? exp)
        ;     (eval (cond->if exp) env)
        ; )
        ((application? exp)
            (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)
            )
        )
        (else
            (error "unknown expression type eval" exp)    
        )
    )
)


;;; main
(driver-loop)

; test ok
; 1
; 2
; "fasdf"

; test todo