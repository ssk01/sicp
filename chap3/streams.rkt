#lang racket
(define (square x)
    (* x x)
)
(define (prime? a)
    (define (p div a)
        (if (> (square div ) a)
            a
            (if (= (remainder  a div) 0)
                div
                (p (+ 1 div) a))
        )
    )
    (= (p 2 a) a)
)
; (prime? 3)
; (prime? 4)
; (prime? 49)
; (prime? 91)
; (prime? 17)

; (time (car (cdr (filter prime? (range 100 1000000)))))
; cpu time: 7391 real time: 7386 gc time: 2237
; 103


(define (stream-car stream)
    (car stream)
)
(define (stream-cdr stream)
    (force (cdr stream))
)
(define (force delayed-object)
    (delayed-object)
)
(define (delay exp)
    (lambda () exp)
)
(define (cons-stream a b)
    (cons a (delay b))
)
(define (stream-ref s n)
    (if (= n 0)
        (stream-car s)
        (stream-ref (stream-cdr s) (- n 1))
    )
)
(define (stream-null? s)
    (null? s)
)
(define (stream-map proc s)
    (if (stream-null? s)
        null
        (cons-stream (proc (stream-car s)) (stream-map proc (stream-cdr s)) )
    )
)
(define (stream-filter pred s)
    (if (stream-null? s)
        null
        (if (pred (stream-car s))
            (cons-stream (stream-car s) (stream-filter pred (stream-cdr s)))
            (stream-filter pred (stream-cdr s))
        )
    )
)

(define (stream-for-each proc s)
    (if (stream-null? s)
        'done
        (begin (proc (stream-car s)) 
                (stream-for-each proc (stream-cdr s))
            )
    )
)
(define (stream-display s)
    (stream-for-each display-line s)
)
(define (display-line x)
    (newline)
    (display x)
)
(define (stream-range low high)
    (if (> low high)
        null
        (cons-stream low (stream-range(+ 1 low) high))
    )
)

; (stream-display (stream-range 1 10))
; (time (car (cdr (filter prime? (range 100 1000000)))))
; cpu time: 7391 real time: 7386 gc time: 2237
; 103
; (time (stream-car (stream-cdr (stream-filter prime? (stream-range 100 1000000)))))
(stream-car (stream-cdr (stream-filter prime? (stream-range 100 1000000))))
